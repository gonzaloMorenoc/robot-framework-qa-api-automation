#!/bin/bash

# WordMate Pre-commit Hook
# Prevents committing sensitive data like passwords and API keys

set -e

echo "🔍 WordMate Security Check - Scanning for sensitive data..."

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Function to print colored output
print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Files to never commit
FORBIDDEN_FILES=(
    ".env"
    ".env.local"
    ".env.production"
    "config/environments/local.yaml"
    "config/environments/secrets.yaml"
    "config/test_data/sensitive/"
    "**/credentials.json"
    "**/secrets.json"
    "**/*password*"
    "**/*secret*"
    "**/*token*"
)

# Patterns that indicate sensitive data
SENSITIVE_PATTERNS=(
    "password.*=.*['\"][^'\"]{3,}['\"]"
    "secret.*=.*['\"][^'\"]{3,}['\"]"
    "token.*=.*['\"][^'\"]{10,}['\"]"
    "key.*=.*['\"][^'\"]{10,}['\"]"
    "TestPassword123!"
    "AdminPassword123!"
    "PremiumPass456!"
    "sk-[a-zA-Z0-9]+"
    "AIza[0-9A-Za-z\\-_]{35}"
    "ya29\\.[0-9A-Za-z\\-_]+"
)

# Extensions to check for sensitive content
CHECK_EXTENSIONS=("*.yaml" "*.yml" "*.json" "*.py" "*.robot" "*.txt" "*.md")

# Check for forbidden files
echo "🔍 Checking for forbidden files..."
forbidden_found=false

for pattern in "${FORBIDDEN_FILES[@]}"; do
    # Use git ls-files to check staged files
    if git diff --cached --name-only | grep -E "^${pattern}$" >/dev/null 2>&1; then
        print_error "Forbidden file staged for commit: $pattern"
        forbidden_found=true
    fi
done

# Check file contents for sensitive patterns
echo "🔍 Scanning file contents for sensitive data..."
sensitive_found=false

# Get list of staged files with specified extensions
staged_files=$(git diff --cached --name-only --diff-filter=ACM)

for file in $staged_files; do
    # Skip if file doesn't exist (deleted files)
    if [[ ! -f "$file" ]]; then
        continue
    fi
    
    # Check if file extension should be scanned
    should_check=false
    for ext in "${CHECK_EXTENSIONS[@]}"; do
        if [[ "$file" == $ext ]]; then
            should_check=true
            break
        fi
    done
    
    if [[ "$should_check" == false ]]; then
        continue
    fi
    
    # Scan file content
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        if git show ":$file" | grep -iE "$pattern" >/dev/null 2>&1; then
            print_error "Sensitive pattern found in $file: $pattern"
            sensitive_found=true
        fi
    done
    
    # Check for common credential formats
    if git show ":$file" | grep -iE "(password|passwd|pwd|secret|token|key|api_key).*[:=].*['\"][^'\"]{3,}['\"]" >/dev/null 2>&1; then
        # Skip if it's using environment variable syntax
        if ! git show ":$file" | grep -E '\$\{[^}]+\}' >/dev/null 2>&1; then
            print_warning "Potential credential found in $file (please verify it's not sensitive)"
        fi
    fi
done

# Check for .env file existence without it being in .gitignore
if [[ -f ".env" ]]; then
    if ! grep -q "^\.env$" .gitignore 2>/dev/null; then
        print_error ".env file exists but is not in .gitignore"
        sensitive_found=true
    fi
fi

# Check for large files that might contain dumps
echo "🔍 Checking for large files..."
large_files=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ] && [ $(wc -c < "{}") -gt 1048576 ]; then echo "{}"; fi')

if [[ -n "$large_files" ]]; then
    print_warning "Large files detected (>1MB):"
    echo "$large_files"
    print_warning "Please ensure these don't contain sensitive data"
fi

# Final decision
if [[ "$forbidden_found" == true || "$sensitive_found" == true ]]; then
    echo ""
    print_error "COMMIT BLOCKED: Sensitive data detected!"
    echo ""
    echo "🔒 Security recommendations:"
    echo "  1. Remove sensitive files from staging: git reset HEAD <file>"
    echo "  2. Use environment variables instead: \${VARIABLE_NAME}"
    echo "  3. Add sensitive files to .gitignore"
    echo "  4. Use .env file for local credentials (never commit it)"
    echo "  5. Run: python scripts/validate_credentials.py"
    echo ""
    echo "🚫 To bypass this check (NOT RECOMMENDED):"
    echo "   git commit --no-verify"
    echo ""
    exit 1
fi

# Check if this is the first commit and remind about setup
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    # Not first commit
    :
else
    # First commit
    echo ""
    print_warning "This appears to be your first commit!"
    echo "📋 Security checklist:"
    echo "  ✓ .env file is in .gitignore"
    echo "  ✓ No hardcoded credentials in config files"
    echo "  ✓ All sensitive data uses environment variables"
    echo ""
fi

print_success "Security check passed! No sensitive data detected."
echo "🔐 Commit is safe to proceed."

exit 0